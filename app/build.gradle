/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

group = 'org.graceliying'
version = '1.0-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // JUnit dependencies (use a consistent version)
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.0'

    // Mockito dependencies for mocking
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'

    // Logging dependencies
    testImplementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'

    // Other dependencies
    implementation 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    // Selenium WebDriver
    implementation 'org.seleniumhq.selenium:selenium-java:4.28.1'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

tasks.build {
    dependsOn tasks.javadoc
}

javadoc {
    destinationDir = file("${project.buildDir}/docs/javadoc") // Updated to use project.buildDir
    title = "Practical Java Project"
    options {
        header = "Practical Java Project API Documentation"
        footer = "Created by Grace Li- liyingbupt@gmail.com"
    }
}

task javadocTask(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${project.buildDir}/docs/javadoc") // Updated to use project.buildDir
}
